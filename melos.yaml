name: driver_app

versioning:
  mode: independent

packages:
  - ui/**
  - infrastructure/**

scripts:
  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks

  format:
    run: melos exec -c 6 --fail-fast -- dart format .
  analyze:
    run: melos exec -c 3 flutter analyze
    description: Run analyze for Flutter packages in this project

  build:all:
    run: |
      melos bootstrap
      melos run build:example_ios_pub --no-select
      melos run build:example_android_pub --no-select
    #      melos run build:example_web --no-select
    description: Build all example apps

  build:example_ios:
    run: |
      melos exec -c 6 --dir-exists="ios" --fail-fast -- \
        "flutter build ios --target=lib/environments/production/production_main.dart --no-codesign --no-pub"
    description: Build a specific example app for iOS.
    packageFilters:
      dirExists:
        - ios
      scope: "*example*"

  build:example_ios_pub:
    run: |
      melos exec -c 6 --dir-exists="ios" --fail-fast -- \
        "flutter build ios --target=lib/environments/production/production_main.dart --no-codesign"
    description: |
      Build a specific example app for iOS.
      melos bootstrap does not generate all files generated by a build that runs
      `pub get`, and `flutter drive` does not either, so it is still necessary to
      build sometimes without the `--no-pub` switch. Careful: `melos bootstrap` after.
    packageFilters:
      dirExists:
        - ios
      scope: "*example*"

  build:example_android:
    run: |
      melos exec -c 6 --dir-exists="android"  --fail-fast -- \
        "flutter build apk --target=lib/environments/production/production_main.dart --no-pub"
    description: Build a specific example app for Android.
    packageFilters:
      dirExists:
        - android
      scope: "*example*"

  build:example_android_pub:
    run: |
      melos exec -c 6 --dir-exists="android" --fail-fast -- \
        "flutter build appbundle --no-tree-shake-icons --target=lib/environments/production/production_main.dart"
    description: Build a specific example app for Android.
    packageFilters:
      dirExists:
        - android
      scope: "*example*"

  build:example_macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build macos --no-pub"
    description: |
      Build a specific example app for macOS.
        - Requires `flutter channel stable`.
        - Requires `flutter config --enable-macos-desktop` set.
    packageFilters:
      dirExists:
        - macos
      scope: "*example*"

  build:example_linux:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build linux --no-pub"
    description: |
      Build a specific example app for web.
         - Requires `flutter channel stable`.
         - Requires `flutter config --enable-linux-desktop` set.
    packageFilters:
      dirExists:
        - linux
      scope: "*example*"

  build:example_windows:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build windows --no-pub"
    description: |
      Build a specific example app for windows.
        - Requires `flutter channel stable`.
        - Requires `flutter config --enable-windows-desktop` set.
    packageFilters:
      dirExists:
        - windows
      scope: "*example*"

  build:example_web:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build web --no-pub"
    description: |
      Build a specific example app for web.
        - Requires `flutter channel stable`.
    packageFilters:
      dirExists:
        - web
      scope: "*example*"

  unit_test:
    run: melos exec --dir-exists="test" --fail-fast -- flutter test --no-pub --coverage
    description: Run all Flutter tests in this project.
  test:selective:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --no-pub --reporter compact --no-test-assets"
    description: Run `flutter test` for a specific package.
    select-package:
      dir-exists:
        - test
      ignore:
        - "*example*"
  unit_test_and_coverage:
    description: Merge all packages coverage tracefiles ignoring data related to generated files.
    run: |
      melos exec rm -rf coverage
      melos run unit_test
      melos exec -c 1 --file-exists=coverage/lcov.info -- coverde filter --input ./coverage/lcov.info --output MELOS_ROOT_PATH/coverage/filtered.lcov.info --filters \.g\.dart
      coverde value -i coverage/filtered.lcov.info > MELOS_ROOT_PATH/coverage/result.txt

  install:
    run: melos exec -c 6 flutter pub get
    description: Install all dependencies
  clean:
    run: melos exec -c 6 -- flutter clean && melos run install
    description: Clean Flutter packages in this project and run bootstrap
  upgrade:
    run: melos exec -c 6 flutter pub upgrade
    description: Upgrade all dependencies

  format:check:
    run: melos exec -c 6 --fail-fast -- dart format --set-exit-if-changed .
  clean codegen:
    run: melos exec -c 1 --depends-on="build_runner" -- dart run build_runner clean
    description: Run clean code generation using build_runner
  codegen:
    run: melos exec -c 1 --depends-on="build_runner" -- dart run build_runner build --delete-conflicting-outputs
    description: Run code generation using build_runner
  codegen:selective:
    run: melos exec -c 1 --depends-on="build_runner" -- dart run build_runner build --delete-conflicting-outputs
    description: Run code generation using build_runner in a specific package
    select-package:
      depends-on: "build_runner"

environment:
  sdk: ">=3.0.0 <4.0.0"
  flutter: ">=3.0.0"
